name: Build APK

on:
  workflow_dispatch:
    inputs:
      release_tag:
        required: false
        type: string
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2
      with:
        submodules: 'recursive'
        fetch-depth: '0'

    - name: Ensure hev-socks5-tunnel
      run: |
        if [ ! -d "hev-socks5-tunnel" ] || [ ! -f "hev-socks5-tunnel/Android.mk" ]; then
          echo "hev-socks5-tunnel not found, initializing..."
          if [ -d "hev-socks5-tunnel" ]; then
            rm -rf hev-socks5-tunnel
          fi
          git clone --recursive https://github.com/heiher/hev-socks5-tunnel.git
        fi
        
        # Verify submodules are properly initialized
        echo "Checking hev-socks5-tunnel directory..."
        ls -la hev-socks5-tunnel/
        
        # Checking build files
        echo "Checking build files..."
        ls -la hev-socks5-tunnel/build.mk || echo "build.mk not found"
        
        # Make sure the file exists
        if [ ! -f "hev-socks5-tunnel/build.mk" ]; then
          echo "build.mk is missing, downloading from original repo"
          curl -o hev-socks5-tunnel/build.mk https://raw.githubusercontent.com/heiher/hev-socks5-tunnel/master/build.mk
        fi

    - name: Setup Android SDK
      run: |
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          --channel=3 \
          --install "ndk;29.0.13113456"
        echo "NDK_HOME=$ANDROID_HOME/ndk/29.0.13113456" >> $GITHUB_ENV
        sed -i '10i\
        \
            ndkVersion = "29.0.13113456"' ${{ github.workspace }}/V2rayNG/app/build.gradle.kts

    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > ${{ github.workspace }}/V2rayNG/local.properties
        echo "Created local.properties with ANDROID_HOME=$ANDROID_HOME"

    - name: Restore cached libhev-socks5-tunnel
      id: cache-libhev-socks5-tunnel-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ github.workspace }}/libs
        key: libhev-socks5-tunnel-${{ runner.os }}-${{ env.NDK_HOME }}-${{ hashFiles('.git/modules/hev-socks5-tunnel/HEAD') }}-${{ hashFiles('.git/modules/libancillary/HEAD') }}

    - name: Build libhev-socks5-tunnel
      if: steps.cache-libhev-socks5-tunnel-restore.outputs.cache-hit != 'true'
      run: |
        echo "Setting up build environment for hev-socks5-tunnel..."
        
        # Ensure Android.mk and Application.mk exist
        if [ ! -f "hev-socks5-tunnel/Android.mk" ]; then
          echo "Creating Android.mk file..."
          cat > hev-socks5-tunnel/Android.mk << 'EOF'
LOCAL_PATH := $(call my-dir)

include $(CLEAR_VARS)
LOCAL_MODULE := hev-socks5-tunnel

LOCAL_CFLAGS += -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers
LOCAL_CFLAGS += -std=gnu99 -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L
LOCAL_CFLAGS += -I$(LOCAL_PATH)/src -I$(LOCAL_PATH)/third-part/lwip/include
LOCAL_CFLAGS += -I$(LOCAL_PATH)/third-part/yaml/yaml/src

LOCAL_SRC_FILES := \
	$(wildcard $(LOCAL_PATH)/src/*.c) \
	$(wildcard $(LOCAL_PATH)/src/core/*.c) \
	$(wildcard $(LOCAL_PATH)/src/tunnel/*.c) \
	$(wildcard $(LOCAL_PATH)/third-part/lwip/src/core/*.c) \
	$(wildcard $(LOCAL_PATH)/third-part/lwip/src/core/ipv4/*.c) \
	$(wildcard $(LOCAL_PATH)/third-part/lwip/src/core/ipv6/*.c) \
	$(wildcard $(LOCAL_PATH)/third-part/lwip/src/api/*.c) \
	$(wildcard $(LOCAL_PATH)/third-part/yaml/yaml/src/*.c)

LOCAL_STATIC_LIBRARIES := hev-task-system

include $(BUILD_SHARED_LIBRARY)

$(call import-module, hev-task-system)
EOF
        fi

        if [ ! -f "hev-socks5-tunnel/Application.mk" ]; then
          echo "Creating Application.mk file..."
          cat > hev-socks5-tunnel/Application.mk << 'EOF'
APP_PLATFORM := android-21
APP_ABI := armeabi-v7a arm64-v8a x86 x86_64
APP_CFLAGS := -O3
APP_MODULES := hev-socks5-tunnel
EOF
        fi

        # Ensure hev-task-system exists
        if [ ! -d "hev-socks5-tunnel/third-part/hev-task-system" ]; then
          echo "Cloning hev-task-system..."
          mkdir -p hev-socks5-tunnel/third-part
          git clone --recursive https://github.com/heiher/hev-task-system.git hev-socks5-tunnel/third-part/hev-task-system
        fi

        # Ensure hev-task-system Android.mk exists
        if [ ! -f "hev-socks5-tunnel/third-part/hev-task-system/Android.mk" ]; then
          echo "Creating hev-task-system Android.mk..."
          cat > hev-socks5-tunnel/third-part/hev-task-system/Android.mk << 'EOF'
LOCAL_PATH := $(call my-dir)

include $(CLEAR_VARS)
LOCAL_MODULE := hev-task-system

LOCAL_CFLAGS += -Wall -Wextra -Wno-unused-parameter
LOCAL_CFLAGS += -std=gnu99 -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L
LOCAL_CFLAGS += -I$(LOCAL_PATH)/src

LOCAL_SRC_FILES := \
	$(wildcard $(LOCAL_PATH)/src/*.c)

include $(BUILD_STATIC_LIBRARY)
EOF
        fi

        # Set up jni directory
        mkdir -p V2rayNG/app/src/main/jni
        ln -sf "$(pwd)/hev-socks5-tunnel" "V2rayNG/app/src/main/jni/hev-socks5-tunnel"
        
        # Add jni path to build path for NDK
        echo "ndk.dir=$ANDROID_HOME/ndk/29.0.13113456" >> V2rayNG/local.properties
        
        # Build the library
        echo "Building hev-socks5-tunnel with NDK..."
        cd V2rayNG/app/src/main
        export NDK_PROJECT_PATH=.
        $NDK_HOME/ndk-build -C jni APP_BUILD_SCRIPT=jni/hev-socks5-tunnel/Android.mk APP_ABI=all APP_PLATFORM=android-21 NDK_LIBS_OUT=../libs NDK_OUT=../obj APP_SHORT_COMMANDS=false LOCAL_SHORT_COMMANDS=false -B
        cd ../../../../
      continue-on-error: true

    - name: Save libhev-socks5-tunnel
      if: steps.cache-libhev-socks5-tunnel-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ github.workspace }}/libs
        key: libhev-socks5-tunnel-${{ runner.os }}-${{ env.NDK_HOME }}-${{ hashFiles('.git/modules/hev-socks5-tunnel/HEAD') }}-${{ hashFiles('.git/modules/libancillary/HEAD') }}

    - name: Copy libhev-socks5-tunnel
      run: |
        cp -r ${{ github.workspace }}/libs ${{ github.workspace }}/V2rayNG/app

    - name: Fetch AndroidLibXrayLite tag
      run: |
        pushd AndroidLibXrayLite
        CURRENT_TAG=$(git describe --tags --abbrev=0)
        echo "Current tag in this repo: $CURRENT_TAG"
        echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV
        popd

    - name: Download libv2ray
      uses: robinraju/release-downloader@v1.12
      with:
        repository: '2dust/AndroidLibXrayLite'
        tag: ${{ env.CURRENT_TAG }}
        fileName: 'libv2ray.aar'
        out-file-path: V2rayNG/app/libs/

    - name: Restore cached libhysteria2
      id: cache-libhysteria2-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ github.workspace }}/hysteria/libs
        key: libhysteria2-${{ runner.os }}-${{ env.NDK_HOME }}-${{ hashFiles('.git/modules/hysteria/HEAD') }}-${{ hashFiles('libhysteria2.sh') }}

    - name: Setup Golang
      if: steps.cache-libhysteria2-restore.outputs.cache-hit != 'true'
      uses: actions/setup-go@v5.4.0
      with:
        go-version-file: 'AndroidLibXrayLite/go.mod'
        cache: false

    - name: Build libhysteria2
      if: steps.cache-libhysteria2-restore.outputs.cache-hit != 'true'
      run: |
        bash libhysteria2.sh

    - name: Save libhysteria2
      if: steps.cache-libhysteria2-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ github.workspace }}/hysteria/libs
        key: libhysteria2-${{ runner.os }}-${{ env.NDK_HOME }}-${{ hashFiles('.git/modules/hysteria/HEAD') }}-${{ hashFiles('libhysteria2.sh') }}

    - name: Copy libhysteria2
      run: |
        cp -r ${{ github.workspace }}/hysteria/libs ${{ github.workspace }}/V2rayNG/app

    - name: Setup Java
      uses: actions/setup-java@v4.7.0
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Decode Keystore
      uses: timheuer/base64-to-file@v1.2.4
      id: android_keystore
      with:
        fileName: "android_keystore.jks"
        encodedString: ${{ secrets.APP_KEYSTORE_BASE64 }}

    - name: Build APK
      run: |
        cd ${{ github.workspace }}/V2rayNG
        echo "sdk.dir=${ANDROID_HOME}" > local.properties
        chmod 755 gradlew
        ./gradlew licenseFdroidReleaseReport
        ./gradlew assembleRelease -Pandroid.injected.signing.store.file=${{ steps.android_keystore.outputs.filePath }} -Pandroid.injected.signing.store.password=${{ secrets.APP_KEYSTORE_PASSWORD }} -Pandroid.injected.signing.key.alias=${{ secrets.APP_KEYSTORE_ALIAS }} -Pandroid.injected.signing.key.password=${{ secrets.APP_KEY_PASSWORD }}
    
    - name: Upload arm64-v8a APK
      uses: actions/upload-artifact@v4.6.2
      if: ${{  success() }}
      with:
        name: arm64-v8a
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/*/release/*arm64-v8a*.apk

    - name: Upload armeabi-v7a APK
      uses: actions/upload-artifact@v4.6.2
      if: ${{  success() }}
      with:
        name: armeabi-v7a
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/*/release/*armeabi-v7a*.apk

    - name: Upload x86 APK
      uses: actions/upload-artifact@v4.6.2
      if: ${{  success() }}
      with:
        name: x86-apk
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/*/release/*x86*.apk

    - name: Upload to release
      uses: svenstaro/upload-release-action@v2
      if: github.event.inputs.release_tag != ''
      with:
        file: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/*playstore*/release/*.apk
        tag: ${{ github.event.inputs.release_tag }}
        file_glob: true
        prerelease: true
